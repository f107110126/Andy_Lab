1. Click "Forgot Password"
2. Fill out a form with their email address.
3. Prepare a unique token and associate it with the user's account.
4. Send an email with a unique link back to our site that confirms email ownership.
5. Link back to website, confirm the token, and set a new password.

collections
$collection->first(); $collection->last()
$collection->where('index', 'value');
$collection->first(function($tag) {return strlen($tag->name) > 5;})

collect(['one', 'two', 'three', 'four', ['five', 'six'], 'seven'])->flatten();
--> collect(['one', 'two', 'three', 'four', 'five', 'six', 'seven']);

collect([1, 2, 3, 4, 5, 6, 7, 8, 9])->filter(function ($item) { return $item >= 5; })
--> collect([5, 6, 7, 8, 9])
collect([5, 6, 7, 8, 9])->map(function ($item) { return $item * 3; })
--> collect([15, 18, 21, 24, 27])

Article::with('tags')->get()->pluck('tags.*.name')->collapse();
Article::with('tags')->get()->pluck('tags.*.name')->collapse()->unique();
Article::with('tags')->get()->pluck('tags.*.name')->collapse()->unique()->map(function($item) {return ucwords($item);});

collect([
    ['name' => 'andy', 'gender' => 'male'],
    ['name' => 'jason', 'gender' => 'male'],
    ['name' => 'jane', gender' => 'femail']
])->pluck('name')
--> collect(['andy', 'jason', 'jane'])

collect([1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9])->unique()
--> collect([1, 2, 3, 4, 5, 6, 7, 8, 9])

to export template of email:
php artisan vendor:publish --tag=laravel-mail

by default markdon will use template in views
also can setup with config/mail.php

to use database notification, use command:
php artisan notifications:table
php artisan migrate

to use sms notification, use command:
composer require laravel/nexmo-notification-channel
and setup NEXMO_KEY and NEXMO_SECRET in .env file
use this site: https://dashboard.nexmo.com

to create customer event:
php artisan make:event ProductPurchased
to create customer listener:
php artisan make:listener AwardAchievements
or
php artisan make:listener AwardAchievements -e ProductPurchased

resource ability map:
index --> viewAny
show --> view
create --> create
store --> create
edit --> update
update --> update
destory --> delete

$this->authorize('update', $reply->conversation); // call with ability
$this->authorize($reply->conversation); // according which function call it
// find ability from map

php artisan tinker
$user = User::find(6);
$moderator = App\Role::firstOrCreate(['name' => 'moderator']);
$editForum = App\Ability::firstOrCreate(['name' => 'edit_forum']);
$moderator->allowTo($editForum);
$user->assignRole($moderator);
$user->roles;
$user->roles[0]->abilities;
$user->roles->map;
$user->roles->map->abilities;
$user->roles->map->abilities->flatten();
$user->roles->map->abilities->flatten()->pluck('name');
$user->roles->map->abilities->flatten()->pluck('name')->unique();

$user = User::find(6);
$roles = collect([]);
$roles->push(App\Role::where(['name' => 'post_manager'])->first());
$roles->push(App\Role::where(['name' => 'product_manager'])->first());
$user->assignRole($roles);

$roles = collect([]);
$roles->push(App\Role::where(['name' => 'post_manager'])->first());
$roles->push(App\Role::where(['name' => 'product_manager'])->first());
$abilities = collect([]);
$abilities->push(App\Ability::where(['name' => 'edit_post'])->first());
$abilities->push(App\Ability::where(['name' => 'view_post'])->first());
$roles[0]->allowTo($abilities);
$abilities = collect([]);
$abilities->push(App\Ability::where(['name' => 'edit_products'])->first());
$abilities->push(App\Ability::where(['name' => 'view_products'])->first());
$roles[1]->allowTo($abilities);

these all the same
$role = App\Role::wherelabel('mode')->get();
$role = App\Role::whereLabel('mode')->get();
$role = App\Role::where('label', 'mode')->get();
