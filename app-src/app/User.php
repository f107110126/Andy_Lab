<?php

namespace App;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    use Notifiable, Followable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'username', 'avatar', 'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    public function getAvatarAttribute($value)
    {
        // return 'https://i.pravatar.cc/200?u=' . $this->email;
        // return asset($value ?: '/images/default-avatar.jpeg');
        return $value ? asset($value) : 'https://i.pravatar.cc/200?u=' . $this->email;
    }

    public function timeline()
    {
        // include all of the user's tweets
        // as well as the tweets of everyone
        // they follow ... in descending order by date.
        // return Tweet::where('user_id', $this->id)->latest()->get();

        $follows = $this->follows->pluck('id');
        // version 01
        // $follows->push($this->id);
        // return Tweet::whereIn('user_id', $follows)
        //     ->latest()->get();

        // version 02
        return Tweet::whereIn('user_id', $follows)
            ->orWhere('user_id', $this->id)
            ->withLikes()
            ->latest()->orderBy('id', 'desc')->paginate(5);
    }

    public function tweets()
    {
        return $this->hasMany(Tweet::class)->withLikes()->latest()->orderBy('id', 'desc');
    }

    public function getRouteKeyName()
    {
        // return parent::getRouteKeyName(); // TODO: Change the autogenerated stub
        return 'username';
    }

    public function path($append = '')
    {
        $path = route('profiles', $this);
        return $append ? $path . '/' . $append : $path;
    }

    public function setPasswordAttribute($value)
    {
        // this will effect
        $this->attributes['password'] = bcrypt($value);
    }

    public function likes()
    {
        return $this->hasMany(Like::class);
    }
}
